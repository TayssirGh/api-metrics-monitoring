# from fastapi import FastAPI, Depends
# from sqlalchemy import select, or_, and_, text, literal, func
# from sqlalchemy.orm import Session, aliased
#
# # from state_db import SessionLocal
# # from state_models import GeoRegion, GeoDepartment, GeoCommune, AdAd, AdBroker
#
# app = FastAPI()
#
# def get_db():
#     db = SessionLocal()
#     try:
#         yield db
#     finally:
#         db.close()
#
# @app.get("/test-query")
# def test_query(db: Session = Depends(get_db)):
#     gr = aliased(GeoRegion)
#     gd = aliased(GeoDepartment)
#     gc = aliased(GeoCommune)
#     aa = aliased(AdAd)
#     ab = aliased(AdBroker)
#
#     price_min = literal(5)
#     price_max = literal(1000)
#     surface_min = literal(0.0)
#     surface_max = literal(500)
#
#     alert_period_time = text("INTERVAL '7 days'")
#
#     query = (
#         select(
#             gr.name.label("Région"),
#             gd.name.label("Département"),
#             gc.name.label("Commune"),
#             aa.price.label("Prix"),
#             aa.surface_ha_autogenerated.label("Surface (ha)"),
#             aa.original_url.label("Lien de l'offre"),
#             gc.postal_code.label("Commune (code postal)"),
#             aa.commune_code_id.label("Commune (code INSEE)"),
#             aa.date_added.label("Date d'émission"),
#             aa.batch_surface_ha_autogenerated.label("Surface totale du lot en vente (ha)")
#         )
#         .select_from(aa)
#         .outerjoin(gr, gr.id_code == aa.region_code_id)
#         .outerjoin(gd, gd.id_code == aa.department_code_id)
#         .outerjoin(gc, gc.id_code == aa.commune_code_id)
#         .join(ab, ab.id == aa.broker_id)
#         .where(
#             or_(
#                 aa.price.between(price_min, price_max),
#                 aa.price.is_(None)
#             ),
#             or_(
#                 aa.batch_surface.between(surface_min, surface_max),
#                 aa.surface.between(surface_min, surface_max),
#                 aa.surface.is_(None)
#             ),
#             or_(
#                 #TODO test with empty list
#                 aa.region_code_id.in_(["FR-IDF", "FR-OCC"]),
#                 aa.department_code_id.in_(["FR-91", "FR-91"])
#             ),
#             and_(
#                 aa.date_added.between(
#                     func.current_date() - alert_period_time,
#                     func.current_date() - text("INTERVAL '1 day'")
#                 ),
#                 aa.date_added > ab.date_added
#             )
#         )
#     )
#
#     result = db.execute(query).mappings().all()
#     return {"data": [dict(row) for row in result]}